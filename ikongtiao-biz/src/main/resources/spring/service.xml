<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!-- 对包中的所有类进行扫描类上的注解，以完成Bean创建和自动依赖注入的功能 需要更改 -->
    <!--<context:component-scan base-package="com.wetrack.ikongtiao"/>-->
    <!--<context:component-scan base-package="com.wetrack.wechat"/>-->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <!-- 这里支持多种寻址方式：classpath和file -->
                <!--<value>classpath:/conf/weixin.properties</value>-->
                <!--<value>classpath:/conf/redis.conf</value>-->
                <value>classpath*:/conf/*.conf</value>
                <!-- 推荐使用file的方式引入，这样可以将配置和代码分离 -->
                <!--<value>file:/opt/demo/config.properties/demo-mq.properties</value>-->
            </list>
        </property>
    </bean>
    <context:component-scan base-package="com.wetrack"/>
    <mvc:annotation-driven />


    <import resource="classpath*:/spring/redis-repo.xml"></import>
    <import resource="classpath*:/spring/datasource.xml"></import>


    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix">
            <value>/WEB-INF/jsp/</value>
        </property>
        <property name="suffix">
            <value>.jsp</value>
        </property>
    </bean>


    <!-- Spring自己的基于java.util.concurrent.ConcurrentHashMap实现的缓存管理器(该功能是从Spring3.1开始提供的) -->

    <!-- Spring提供的基于的Ehcache实现的缓存管理器 -->
    <!--<cache:annotation-driven cache-manager="cacheManager" />-->
    <!--<bean id="cacheManagerFactory"-->
          <!--class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">-->
        <!--<property name="configLocation" value="classpath:ehcache.xml" />-->
    <!--</bean>-->
    <!--<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">-->
        <!--<property name="cacheManager" ref="cacheManagerFactory" />-->
    <!--</bean>-->

    <bean id="ajaxExceptionHandler" class="com.wetrack.base.exception.AjaxExceptionHandler"/>
    <bean id="businessExceptionHandler" class="com.wetrack.ikongtiao.exception.BusinessExceptionHandler"/>
    <!-- 全局异常处理类 -->
    <bean id="globalExceptionHandler" p:errorPage="errors/exception" p:debug="${debug}"
          class="com.wetrack.base.exception.GlobalExceptionHandler">
    </bean>

    <!-- 全局异常处理 -->
    <bean id="exceptionResolver" p:defaultStatusCode="503"
          class="com.wetrack.base.exception.HandlerMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <!-- 遇到AjaxException异常时，采用 ajaxExceptionHandler 处理 -->
                <prop key="com.wetrack.base.result.AjaxException">handler:ajaxExceptionHandler</prop>
                <prop key="com.wetrack.base.result.BusinessExceptionHandler">handler:businessExceptionHandler</prop>
            </props>
        </property>
        <!-- 全局异常：在exceptionMappings里面找不到对应的异常时，采用 globalExceptionHandler 处理 -->
        <property name="defaultErrorView" value="handler:globalExceptionHandler"/>
        <!-- 定义在发生异常时视图跟返回码的对应关系 -->
        <property name="statusCodes">
            <props>
                <!-- 发生AjaxException时对应视图handler:ajaxExceptionHandler，返回状态码200 -->
                <prop key="handler:ajaxExceptionHandler">200</prop>
                <prop key="handler:businessExceptionHandler">500</prop>
            </props>
        </property>
    </bean>

    <mvc:interceptors>
        <!--ajax response wrapper的包装拦截器， 和@AjaxResponseWrapper结合使用，目前只支持启用  <mvc:annotation-driven/> 的mvc配置-->
        <!--<bean class="com.wetrack.auth.filter.AjaxResponseInterceptor"></bean>-->
        <bean class="com.wetrack.auth.filter.SignTokenAuthInterceptor"></bean>
    </mvc:interceptors>
</beans>