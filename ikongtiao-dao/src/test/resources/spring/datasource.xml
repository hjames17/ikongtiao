<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd">

	<context:component-scan base-package="com.wetrack"/>
	<bean id="containerConfProperty"
		  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!-- 是否忽略不可解析的 -->
		<property name="ignoreUnresolvablePlaceholders" value="true"/>
		<!-- 多个locations， 单个location <value> -->
		<property name="locations">
			<list>
				<value>classpath*:conf/*.conf</value>
			</list>
		</property>
	</bean>

	<bean id="dataSourceConfig" abstract="true">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="preferredTestQuery" value="select 1" />
		<!--初始化时获取3个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		<!--连接池中保留的最小连接数。Default: ? -->
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<!--最大空闲时间,在x秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!--当连接池用完时再调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。
			单位毫秒。Default: 0 -->
		<property name="checkoutTimeout" value="2000" />
	</bean>
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		  parent="dataSourceConfig" destroy-method="close">
		<property name="jdbcUrl" value="${jdbc.wetrack.url}" />
		<property name="user" value="${jdbc.wetrack.user}" />
		<property name="password" value="${jdbc.wetrack.password}" />
	</bean>
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" >
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<!-- MyBatis 的 XML 配置文件路径 -->
		<property name="configLocation" value="classpath:mybatis/sqlMapConfig.xml" />
		<!-- 扫描自动生成的xml文件 --><!-- Mybatis XML映射文件 -->
		<property name="mapperLocations"  >
			<list><!-- Mybatis XML映射文件 -->
				<value>classpath*:mybatis/ikongtiao/*.xml</value>
				<value>classpath*:mybatis/ikongtiao-mix/*.xml</value>
				<!-- 扫描自己写的xml文件-->
			</list>
		</property>
	</bean>
	<!-- 声明式注解事务配置：容器中默认的事件管理器 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<bean id="commonDao" class="com.wetrack.base.dao.factory.CommonDaoFactoryBean">
		<property name="sqlSessionFactory"><ref bean="sessionFactory"/></property>
	</bean>
	<!-- 事务管理 -->
	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 事务模板 -->
	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager" />
	</bean>
</beans>